Index: utils/image_tools.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from PIL import Image\r\nimport os\r\nimport random\r\n\r\n\r\ndef calculate_average_size(bounding_boxes):\r\n    total_width = 0\r\n    total_height = 0\r\n    total_boxes = 0\r\n\r\n    for category, boxes in bounding_boxes.items():\r\n        for bbox in boxes:\r\n            bbox_tuples = [(bbox[i], bbox[i + 1]) for i in range(0, len(bbox), 2)]\r\n            width = max(coord[0] for coord in bbox_tuples) - min(coord[0] for coord in bbox_tuples)\r\n            height = max(coord[1] for coord in bbox_tuples) - min(coord[1] for coord in bbox_tuples)\r\n            total_width += width\r\n            total_height += height\r\n            total_boxes += 1\r\n\r\n    average_width = total_width / total_boxes\r\n    average_height = total_height / total_boxes\r\n\r\n    return average_width, average_height\r\n\r\n\r\ndef get_scaled_image(ins_img, bg_img, args, bg_img_dict: dict = None, specified_classes: list = None):\r\n    \"\"\"\r\n    :param ins_img:\r\n    :param bg_img:\r\n    :param args:\r\n    :param bg_img_dict:\r\n    :param specified_classes: 一个列表，指定参考哪些类的大小作为自动缩放参照。\r\n    比如想要粘贴小汽车目标，应参考small-vehicle而非airport的大小\r\n    :return:\r\n    \"\"\"\r\n    # assert (0 < args.min_scaling_factor <= args.max_scaling_factor <= 1) or args.bg_json_path is not None\r\n\r\n    if (not args.manual_scaling) and (bg_img_dict is not None):\r\n        if specified_classes is None:\r\n            specified_classes = bg_img_dict[\"exist_category\"]\r\n        specified_boxes_dict = {category: bg_img_dict[category] for category in specified_classes}\r\n        average_width, average_height = calculate_average_size(specified_boxes_dict)\r\n\r\n        # Calculate the scaling factor based on the average size\r\n        min_scaling_factor = min(average_width / ins_img.width, average_height / ins_img.height)\r\n        max_scaling_factor = max(average_width / ins_img.width, average_height / ins_img.height)\r\n    else:\r\n        min_scaling_factor = args.min_scaling_factor\r\n        max_scaling_factor = args.max_scaling_factor\r\n\r\n    scaling_factor = random.uniform(min_scaling_factor, max_scaling_factor)\r\n\r\n    # Scale the new object image\r\n    new_width = int(ins_img.width * scaling_factor)\r\n    new_height = int(ins_img.height * scaling_factor)\r\n    scaled_ins_image = ins_img.resize((new_width, new_height))\r\n\r\n    return scaled_ins_image\r\n\r\n\r\ndef visualize_bbox():\r\n    raise NotImplementedError\r\n\r\n\r\ndef is_overlap(box1, box2):\r\n    for coord1 in box1:\r\n        for coord2 in box2:\r\n            x1_min, y1_min, x1_max, y1_max = min(coord1[0::2]), min(coord1[1::2]), max(coord1[0::2]), max(coord1[1::2])\r\n            x2_min, y2_min, x2_max, y2_max = min(coord2[0::2]), min(coord2[1::2]), max(coord2[0::2]), max(coord2[1::2])\r\n            if not (x1_max < x2_min or x1_min > x2_max or y1_max < y2_min or y1_min > y2_max):\r\n                return True\r\n    return False\r\n\r\n\r\ndef find_non_overlapping_position(new_width, new_height, image_size, existing_bounding_boxes):\r\n    max_attempts = 1000  # You can adjust the maximum number of attempts\r\n    if image_size[0] - new_width < 0 or image_size[1] - new_height < 0:\r\n        return None, None\r\n    for _ in range(max_attempts):\r\n        x = random.randint(0, image_size[0] - new_width)\r\n        y = random.randint(0, image_size[1] - new_height)\r\n\r\n        new_box = [\r\n            [x, y, x + new_width, y, x + new_width, y + new_height, x, y + new_height]\r\n        ]\r\n\r\n        # Check for overlap with existing bounding boxes\r\n        overlap = any(is_overlap(new_box, existing_bounding_boxes[category]) for category in existing_bounding_boxes)\r\n\r\n        if not overlap:\r\n            return x, y\r\n\r\n    # If no non-overlapping position is found, return None\r\n    return None, None\r\n\r\n\r\ndef calculate_average_size(bounding_boxes):\r\n    total_width = 0\r\n    total_height = 0\r\n    total_boxes = 0\r\n\r\n    for category, boxes in bounding_boxes.items():\r\n        for bbox in boxes:\r\n            bbox_tuples = [(bbox[i], bbox[i + 1]) for i in range(0, len(bbox), 2)]\r\n            width = max(coord[0] for coord in bbox_tuples) - min(coord[0] for coord in bbox_tuples)\r\n            height = max(coord[1] for coord in bbox_tuples) - min(coord[1] for coord in bbox_tuples)\r\n            total_width += width\r\n            total_height += height\r\n            total_boxes += 1\r\n\r\n    average_width = total_width / total_boxes\r\n    average_height = total_height / total_boxes\r\n\r\n    return average_width, average_height\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/image_tools.py b/utils/image_tools.py
--- a/utils/image_tools.py	(revision addaee6cf20ee3a9dbe51266373ab33459bd7aa6)
+++ b/utils/image_tools.py	(date 1703663053272)
@@ -92,23 +92,3 @@
 
     # If no non-overlapping position is found, return None
     return None, None
-
-
-def calculate_average_size(bounding_boxes):
-    total_width = 0
-    total_height = 0
-    total_boxes = 0
-
-    for category, boxes in bounding_boxes.items():
-        for bbox in boxes:
-            bbox_tuples = [(bbox[i], bbox[i + 1]) for i in range(0, len(bbox), 2)]
-            width = max(coord[0] for coord in bbox_tuples) - min(coord[0] for coord in bbox_tuples)
-            height = max(coord[1] for coord in bbox_tuples) - min(coord[1] for coord in bbox_tuples)
-            total_width += width
-            total_height += height
-            total_boxes += 1
-
-    average_width = total_width / total_boxes
-    average_height = total_height / total_boxes
-
-    return average_width, average_height
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1703663022317)
+++ b/.gitignore	(date 1703663022317)
@@ -0,0 +1,2 @@
+*.jpg
+*.png
\ No newline at end of file
